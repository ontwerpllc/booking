create table "public"."time_slot" (
    "organization_id" bigint generated by default as identity not null,
    "member_id" uuid not null,
    "day_of_week" day_of_week_enum not null,
    "time" time with time zone not null,
    "created_at" timestamp with time zone not null default now()
);

alter table "public"."time_slot" enable row level security;

CREATE UNIQUE INDEX time_slot_pkey ON public.time_slot USING btree (organization_id, member_id, day_of_week, "time");

CREATE INDEX time_slot_day_of_week_idx ON public.time_slot USING btree (day_of_week);

CREATE INDEX time_slot_member_id_idx ON public.time_slot USING btree (member_id);

CREATE INDEX time_slot_organization_id_idx ON public.time_slot USING btree (organization_id);

alter table "public"."time_slot" add constraint "time_slot_pkey" PRIMARY KEY using index "time_slot_pkey";

alter table "public"."time_slot" add constraint "time_slot_member_id_fkey" FOREIGN KEY (member_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."time_slot" validate constraint "time_slot_member_id_fkey";

alter table "public"."time_slot" add constraint "time_slot_organization_id_fkey" FOREIGN KEY (organization_id) REFERENCES organization(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;        

alter table "public"."time_slot" validate constraint "time_slot_organization_id_fkey";